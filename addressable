
可寻址：
    变量：
        &x
    指针：
        &*x

        type Profile struct{
            Name string
        }
        fmt.Println(unsafe.Pointer(&Profile{Name:"iswbm"}))
    数组元素索引：
        &a[0]

        s := [...]{1,2,3}
        fmt.Println(&s[0])
    切片：
        fmt.Println([]int{1,2,3}[1:])   // [2 3]
	    fmt.Printf("%p\n", &[]int{1, 2, 3})
    切片元素索引：
        &s[1]
        s := make([]int,2,2)
        fmt.Println(&s[0]) // 正确，但是记得该地址是可能变化的
    组合字面量：
        &struct{X type}{value}

        *****注意区分以下两种情况*****
        type Profile struct{Name string}
        func new()Profile{
            return Profile{Name:"iswbm"}
        }
        fmt.Println(&new())                 // cannot take the address of new()
        // 虽然组合字面量是不可寻址的，但却可以对组合字面量的字段属性进行寻址(直接访问)
        fmt.Println(new().Name) // correct ?????????????????????
        // 类似临时对象

        fmt.Println(&Profile{Name:"iswbm"}) // correct
        // & 并不是取地址的操作，而代表实例化一个结构体的指针。
        // p := &Profile{} 指针赋值
        // ********要疯了**********



        *********************************************************
        一个变量: &x
        指针引用(pointer indirection): &*x
        slice索引操作(不管slice是否可寻址): &s[1]
        可寻址struct的字段: &point.X
        可寻址数组的索引操作: &a[0]
        composite literal类型: &struct{ X int }{1}
        *********************************************************


不可寻址：
	常量：
		const VERSION = "1.0"
		fmt.Println(&VERSION) // invalid operation
	字符串：
		func getStr()string{ return "iswbm" }
		fmt.Println(&getStr())	// cannot take the address of getStr()
	函数或方法：
		func getStr()string{ return "iswbm" }
		fmt.Println(&getStr)	// cannot take the address of getStr
	基本类型字面量：
		***基本类型***
		字面量：基本类型字面量和复合类型字面量
		大多数匿名值都不可寻址（复合字面值是一个大大的例外）
		func getInt() int{ return 1024 }
		fmt.Println(&getInt()) 	// cannot take address of getInt()
		// type St struct{i int}
		// s := &St{i:20} ->这里表示的是struct指针赋值*******这种有点特别*******
	数组字面量：
		p := [3]{1,2,3}[1:]	// invalid operation, slice of unaddressable value
		当你对数组字面量进行切片操作，其实就是寻找内部元素的地址
	map中的元素：
		如果字典的元素不存在，则返回零值，而零值是不可变对象，如果能寻址问题就大了。
		而如果字典的元素存在，考虑到 Go 中 map 实现中元素的地址是变化的，这意味着寻址的结果也是无意义的。
		***************元素的地址是变化的：*****动态扩容*****
		p := map[string]string{"name": "iswbm"}
		fmt.Println(&p["name"])	// cannot take the address of p["name"]

		===>
		type Person struct {
			Name	string
			Email 	string
		}
		func main() {
			m := map[int]Person{
			    1:Person{"Andy", "1137291867@qq.com"},
			    2:Person{"Tiny", "qishuai231@gmail.com"},
			    3:Person{"Jack", "qs_edu2009@163.com"},
			}
	    	//编译错误：cannot assign to struct field m[1].Name in map
			m[1].Name = "Scrapup" // m[1] 不可寻址
        }
		


        字符串中的字节:
        map对象中的元素
        接口对象的动态值(通过type assertions获得)
        常数
        literal值(非composite literal)
        package 级别的函数
        方法method (用作函数值)
        中间值(intermediate value):
            函数调用
            显式类型转换
            各种类型的操作 （除了指针引用pointer dereference操作 *x):
                channel receive operations
                sub-string operations
                sub-slice operations
                加减乘除等运算符



有几个点需要解释下：

常数为什么不可以寻址?： 如果可以寻址的话，我们可以通过指针修改常数的值，破坏了常数的定义。
map的元素为什么不可以寻址？:两个原因，如果对象不存在，则返回零值，零值是不可变对象，所以不能寻址，如果对象存在，因为Go中map实现中元素的地址是变化的，这意味着寻址的结果是无意义的。
为什么slice不管是否可寻址，它的元素读是可以寻址的？:因为slice底层实现了一个数组，它是可以寻址的。
为什么字符串中的字符/字节又不能寻址呢：因为字符串是不可变的。
规范中还有几处提到了 addressable:

调用一个receiver为指针类型的方法时，使用一个addressable的值将自动获取这个值的指针
++、--语句的操作对象必须是addressable或者是map的index操作
赋值语句=的左边对象必须是addressable,或者是map的index操作，或者是_
上条同样使用for ... range语句