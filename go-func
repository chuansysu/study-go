Go语言支持普通函数、匿名函数和闭包，从设计上对函数进行了优化和改进，让函数使用起来更加方便。

Go 语言的函数属于“一等公民”（first-class），也就是说：
    1.函数本身可以作为值进行传递。
    2.支持匿名函数和闭包（closure）。
    3.函数可以满足接口。

******************************
支持同类型形参合并
支持递归
支持函数变量赋值
支持匿名函数
支持多返回值
支持闭包
支持可变参数
******************************

函数的基本组成为：
	关键字func、函数名、参数列表、返回值、函数体和返回语句

	func myfunc(x,y int)(int,error){
		return x+y,nil	
	}

定义：
	func 函数名(形式参数列表)(返回值列表){
    		函数体
	}

	如果一个函数在声明时，包含返回值列表，那么该函数必须以 return 语句结尾，除非函数明显无法运行到结尾处，
	例如函数在结尾时调用了 panic 异常或函数中存在无限循环。

函数的类型被称为函数的标识符，如果两个函数形式参数列表和返回值列表中的变量类型一一对应，那么这两个函数被认为有相同的类型和标识符，形参和返回值的变量名不影响函数标识符也不影响它们是否可以以省略参数类型的形式表示。

每一次函数在调用时都必须按照声明顺序为所有参数提供实参（参数值），在函数调用时，Go语言***没有默认参数值***，也没有任何方法可以通过参数名指定形参，因此形参和返回值的变量名对于函数调用者而言没有意义。

在函数中，实参通过值传递的方式进行传递，因此函数的形参是实参的拷贝，对形参进行修改不会影响实参，但是，如果实参包括引用类型，如指针、slice(切片)、map、function、channel 等类型，实参可能会由于函数的间接引用被修改。

	提示:
		同一种类型返回值和命名返回值两种形式只能二选一，混用时将会发生编译错误，例如下面的代码： 
		func namedRetValues() (a, b int, int) =>mixed named and unnamed function parameters

调用函数：
	返回值变量列表 = 函数名(参数列表)
	
	函数名：需要调用的函数名。
	参数列表：参数变量以逗号分隔，尾部无须以分号结尾。
	返回值变量列表：多个返回值使用逗号分隔。

函数变量：
	函数也是一种类型，可以和其他类型一样保存在变量中

	func fire(){
		//do something
	}

	func main(){
		var f func()
		f = fire // 函数变量赋值
		f() // 函数变量调用
	}

匿名函数:
	func(参数列表)(返回参数列表){
		函数体
	}

	1.任何地方可随时定义调用匿名函数
		func(data int){
			fmt.Println("hello",data)
		}(100)
	2.将匿名函数赋值给变量
		f := func(data int){
			fmt.Println("hello",data)
		}

	1)匿名函数用作回调函数
		func visit(list []int, f func(int)){
			for _,v := range list{
				f(v)
			}
		}
		func main(){
			visit([]int{1,2,3,4},func(vint){
				fmt.Println(v)
			})
		}

	2)使用匿名函数实现操作封装
		var skill = map[string]func(){
			"fire":func(){
				//do fire
			},
			"run":func(){
				//do run
			},
		}
		if f,ok := skill["run"]; ok{
			f()
		}

函数和其他类型一样都属于“一等公民”，其他类型能够实现接口，函数也可以:

闭包：
	函数 + 引用环境 = 闭包

	闭包对环境中变量的引用过程也可以被称为“捕获”，在 C++11 标准中，捕获有两种类型，
	分别是引用和复制，可以改变引用的原值叫做“引用捕获”，捕获的过程值被复制到闭包中使用叫做“复制捕获”。

	1.在闭包内部修改引用的变量
		str := "hello world"
		foo := func(){
			str = "hello dude"
		}
		foo()

	2.闭包的记忆效应
		func Accumulate(v int)func()int{
			return func()int{
				v++
				return v
			}
		}
		func main(){
			accumulator := Accumulate(1)
			fmt.Println(accumulator()) =>2
			fmt.Println(accumulator()) =>3
			fmt.Printf("%p\n",&accumulator)
			accumulator2 := Accumulate(10)
			fmt.Println(accumulator2()) =>11
			fmt.Println(accumulator2()) =>12
			fmt.Printf("%p\n",accumulator2)
		}
		*************************************************************************************
		accumulator 与 accumulator2 输出的函数地址不同，因此它们是两个不同的闭包实例。
		*************************************************************************************

	3.闭包实现生成器：
		func playerGen(name string)func()(string,int){
			hp := 150
			return func()(string,int){
				return name,hp
			}
		}
		func main(){
			generator := playerGen("high noon")
			name,hp := generator()
			fmt.Println(name,hp)
		}
	闭包还具有一定的封装性，第 11 行的变量是 playerGen 的局部变量，
	playerGen 的外部无法直接访问及修改这个变量，这种特性也与面向对象中强调的封装性类似。

可变参数：
	...type格式的类型只能作为函数的参数类型存在，并且必须是最后一个参数

	func myfunc(args ...int){
		for _,arg := range args{
		}
	}

	可变参数列表的数量不固定，传入的参数是一个切片，如果需要获得每一个参数的具体值时，可以对可变参数变量进行遍历: for range

	任意类型的可变参数：
		用 interface{} 传递任意类型数据是Go语言的惯例用法，使用 interface{}*******仍然是类型安全的******(怎么理解? =>应该是需要作断言)

	遍历获取每个参数的类型：
		func myPrintf(args ...interface{}){
			for _,arg := range args{
				switch arg.(type){
				case int:
					//
				case string:
					//
				default:
					//
				}
			}
		}
		func main(){
			var v1 int = 1
			var v2 string = "hello"
			myPrintf(v1,v2)
		}
	
	在多个可变参数函数中传递参数：
	可变参数变量是一个包含所有参数的切片，如果要将这个含有可变参数的变量传递给下一个可变参数函数，可以在传递时给可变参数变量后面添加...，
	这样就可以将切片中的元素进行传递，而不是传递可变参数变量本身。
		func rawPrint(rawList ...interface{}){
			for _,a := range rawList{
				fmt.Println(a)
			}
		}
		func print(slist ...interface{}){
			rawPrint(slist...)
		}
		func main(){
			print(1,2,3)
		}
	此时，slist（类型为 []interface{}）将被作为一个整体传入 rawPrint()，rawPrint() 函数中遍历的变量也就是 slist 的切片值。
	可变参数使用...进行传递与切片间使用 append 连接是同一个特性。

defer:延迟执行语句
	将其后面跟随的语句进行延迟处理，在 defer 归属的函数即将返回时，将延迟处理的语句按 defer 的逆序进行执行，
	也就是说，先被 defer 的语句最后被执行，最后被 defer 的语句，最先被执行。

	1.延迟释放锁资源
		func readValue(key string)int{
			lock.Lock()
			defer lock.Unlock()
			return valueByKey[key]
		}
	2.延迟释放文件句柄
		func fileSize(filename string)int64{
			f,err := os.Open(filename)
			if err != nil{
				return 0
			}
			defer f.close()
		}

	3.recover使用**********************

递归：
	一个问题可以被拆分成多个子问题；
	拆分前的原问题与拆分后的子问题除了数据规模不同，但处理问题的思路是一样的；
	不能无限制的调用本身，子问题需要有退出递归状态的条件。

	注意：编写递归函数时，一定要有终止条件，否则就会无限调用下去，直到内存溢出。

*******************************************************************************************
捕获迭代变量：
*******************************************************************************************
	var rmdirs []func()
	for _,dir := range tempDirs(){
		os.MkdirAll(dir,0755)
		rmdirs = append(rmdirs,func(){
			os.RemoveAll(dir) // 不正确
		}
	}
	=>>在循环里创建的所有函数变量共享相同的变量---------一个可访问的存储位置，而不是固定的值。
	=>>也就是dir的内存值，循环结束时的值。
*******************************************************************************************
	修正：
	for _,dir := range tempDirs(){
		dir := dir //使用内部变量覆盖循环变量
		os.MkdirAll(dir,0755)
		rmdirs = append(rmdirs,func(){
			os.RemoveAll(dir) // 不正确
		}
	}
*******************************************************************************************

处理运行时错误：
错误接口的定义：
	type error interface{
		Error() string
	}

	var err = errors.New("this is an error")

	errors包中定义：
		func New(text string)error{
			return &errorString{text}
		}
		type errorString struct{
			s string
		}
		func (e *errorString)Error()string{
			return e.s
		}
	自定义一个错误：
		type ParseError struct{
			Filename string
			Line int
		}
		func (e *ParseError)Error()string{
			return fmt.Sprintf("%s:%d",e.Filename,e.Line)
		}
		func newParseError(filename string,line int)error{
			return &ParseError{filename,line}
		}
		func main(){
			var e error
			e = newParseError("main.go",1)
			fmt.Println(e.Error())
			switch detail := e.(type){
			case *ParseError:
				fmt.Printf("Filename:%s Line:%d\n",detail.Filename,detail.Line)
			default:
			}
		}

宕机panic:
	一般用于严重错误，如程序内部的逻辑不一致

	一般而言，当宕机发生时，程序会中断运行，并立即执行在该 goroutine（可以先理解成线程）中被延迟的函数（defer 机制），
	随后，程序崩溃并输出日志信息，日志信息包括 panic value 和函数调用的堆栈跟踪信息，panic value 通常是某种错误信息。

	在宕机时触发延迟执行语句：
		func main(){
			defer fmt.Println("hello world 1")
			defer fmt.Println("hello world 2")
			panic("crash")
		}
	输出：
		hello world 2
		hello world 1
		panic:crash
		...错误信息

	宕机前，defer 语句会被优先执行
	这个特性可以用来在宕机发生前进行宕机信息处理 =>recover

宕机恢复recover：
	是一个Go语言的内建函数，可以让进入宕机流程中的 goroutine 恢复过来，recover 仅在延迟函数 defer 中有效，
	在正常的执行过程中，调用 recover 会返回 nil 并且没有其他任何效果，
	如果当前的 goroutine 陷入恐慌，调用 recover 可以捕获到 panic 的输入值，并且恢复正常的执行。

	Go语言没有异常系统，其使用 panic 触发宕机类似于其他语言的抛出异常，recover 的宕机恢复机制就对应其他语言中的 try/catch 机制。 

	在 panic 触发的 defer 函数内，可以继续调用 panic，进一步将错误外抛，直到程序整体崩溃。

	虽然 panic/recover 能模拟其他语言的异常机制，但并不建议在编写普通函数时也经常性使用这种特性。
	**************************************************************************
	1.recover必须搭配defer调用
	2.defer一定要在可能引发panic的语句之前定义
	**************************************************************************

	package main
	import(
		"fmt"
		"runtime"
	}
	type panicContext struct{
		function string
	}
	func ProtectRun(entry func()){
		defer func(){
			err := recover()
			switch err.(type){
			case runtime.Error:
				fmt.Println("runtime err:",err)
			//case *panicContext:// 这样也是正确的，注意指针***********************
			default:
				fmt.Println("error:",err)
			}
		}()
		entry()
	}
	func main(){
		fmt.Println("before running")
		ProtectRun(func(){			// 非运行错误
			fmt.Println("手动宕机前")
			panic(&panicContext{
				"手动宕机panic",
			})
			fmt.Println("手动宕机后")
		})
		ProtectRun(func(){ 			// 运行错误
			fmt.Println("赋值宕机前")
			var a *int
			*a = 1
			fmt.Println("赋值宕机后")
		})
		fmt.Println("after running")
	}
	输出：
	before running
	手动宕机前
	error: &{手动宕机panic}
	赋值宕机前
	runtime err: runtime error: invalid memory address or nil pointer dereference
	after running

计算函数执行时间：
	1.func Since(t Time) Duration
		Since() 函数返回从 t 到现在经过的时间，等价于time.Now().Sub(t)。
		
		start := time.Now()
		...
		elapsed := time.Since(start)
		或者
		start := time.Now()
		...
		elapsed := time.Now().Sub(start)

