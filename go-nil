初始零值：
	指针，切片，map，通道，函数，接口

不能比较：
	fmt.Println(nil==nil) =>invald operation

不是关键字或保留字：
	var nil = error.New("my god") =>正确，不提倡

没有默认类型：
	fmt.Printf("%T\n",nil) => error,use of untyped nil

不同类型nil的指针是一样的0x0:
	var arr []int
	var num *int
	fmt.Printf("%p\n",arr) =>0x0
	fmt.Printf("%p\n",num) =>0x0

不同类型的nil是不能比较的：
	var m map[int]string
	var ptr *int
	fmt.Println(m == ptr) =>error,invalid operation

两个相同类型的nil值也可能无法比较：********为什么是可能？********
	var s1 []int
	var s2 []int
	fmt.Println(s1 == nil) =>true
	fmt.Printf(s1 == s2) =>error,invalid operation

不同类型的nil值占用的内存大小可能是不一样的：
	var p *struct{}
	fmt.Println(unsafe.Sizeof(p)) =>8
	var s []int
	fmt.Println(unsafe.Sizeof(s)) =>24
	var m map[int]bool
	fmt.Println(unsafe.Sizeof(m)) =>8
	var c chan string
	fmt.Println(unsafe.Sizeof(c)) =>8
	var f func()
	fmt.Println(unsafe.Sizeof(f)) =>8
	var i interface{}
	fmt.Println(unsafe.Sizeof(i)) =>16
	具体的大小取决于编译器和架构，
	上面打印的结果是在 64 位架构和标准编译器下完成的，
	对应 32 位的架构的，打印的大小将减半。


