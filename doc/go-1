Go语言简介

起源于2007年，在2009年正式对外发布

优势: 部署简单,并发性好,语言设计良好,执行性能好

没有类和继承，通过接口实现多态性

创始人:
	Ken Thompson：贝尔实验室Unix团队人员，C语言，Unix和Plan9的创始人之一
	Rob Pike：go语言项目总负责人，贝尔实验室Unix团队成员
	Robert Griesemer:就职于Google,参与开发Java HotSpot虚拟机
	
设计缘由:C++给他们带来了挫败感，厌烦了等待编译完成

go是编译型语言:
	编译器将源代码编译成二进制或字节码格式，编译时检查错误，优化性能并输出可在不同平台上运行的二进制文件
	支持交叉编译，完全支持UTF-8

go语言吉祥物:Go Gopher --设计者:Renee French -- Rob Pike的妻子

Go语言的特性
Golang编程语言:静态强类型,编译型,并发型,垃圾回收功能
特性：
	语法简单
	并发模型
		Goroutine是Go最显著的特征
		搭配channel实现CSP模型
	内存分配
		完整保留了tcmalloc的原始架构
		使用cache为当前执行线程提供无锁分配
	垃圾回收
	静态链接
	标准库
		功能完善，质量可靠的标准库
	工具链
		完整的工具链
		内置完整测试框架，包括单元测试，性能测试，代码覆盖率，数据竞争，调优pprof
		通过环境变量输出运行时监控信息

Go语言为并发而生:从底层原生支持并发，无须第三方库

性能：与C语言差距大概在10~20%之间
标准库：一般情况下，放在$GOPATH/pkg/$GOOS_$GOARCH/目录下

Go语言上手简单：
	工程机构简单：
		无须头文件，使用.go后缀名的源码文件
		无须解决方案，工程文件和Makefile
	编译速度快：

Go语言代码风格清晰简单：
	去掉循环冗余括号
	去掉表达式冗余括号
	强制的代码风格，提供了一套格式化工具，比如gofmt等
	不再纠结与i++和++i,只有一种写法i++

集成开发工具：Goland,LiteIDE,SublimeTxt,VSCode

工程结构：
	目录结构：
		src:放置项目和库的源文件
		pkg:放置编译后生成的包/库的归档文件
		bin:放置编译后生成的可执行文件

编译和运行：
	go build:编译生成二进制的可执行文件，手动运行
	go run:在编译后直接运行Go程序，编译过程中会产生一个临时文件，但不会生成可执行文件，适合用来调试程序



