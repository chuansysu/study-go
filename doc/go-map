map 是一种特殊的数据结构，一种元素对（pair）的无序集合，pair 对应一个 key（索引）和一个 value（值），所以这个结构也称为关联数组或字典，
这是一种能够快速寻找值的理想结构，给定 key，就可以迅速找到对应的 value。

****map是一个指针，它的底层是数组，而且用到了两个数组，其中一个更底层的数组用于打包保存key和value。****

var mapName map[keytype]valuetype

***map不可比较，唯一比较map == nil***

键类型：
	key 必须是可比较的，再简单点是可以使用 == 运算符进行比较。
	很显然 slice，map，function 不可以，
	所以 数字、string、bool、array、channel、指针可以，以及 包含前面类型的 struct *****
	*************struct =>多键索引，多键转成struct，使用struct作为map的键*************
值类型：
	没有任何限制

***map元素不是一个变量，不可以取地址***
	_ = &map["key"] => 编译错误，无法获取map元素地址
	=>map的增长可能会导致已有元素被重新散列到新的存储位置，这样就可能使得获取的地址无效******

map 是可以动态增长的，未初始化的 map 的值是 nil，使用函数 len() 可以获取 map 中 pair 的数目。

声明：
	var m map[int]int
	m == nil => true
	len(m) => 0 ***注意可以使用***

	m := make(map[int]int) ==> m := map[int]int{} ***等价***
	m == nil => false ***为空但不为nil***
	len(mm) => 0

***大多数的map操作都可以安全的在map的零值nil上执行，但是向零值nil的map中设置元素会错误，设置元素之前必须初始化map***

容量：
	根据新增的 key-value 动态的伸缩，因此它不存在固定长度或者最大限制，但是也可以选择标明 map 的初始容量 capacity
	make(map[keytype]valuetype,cap)
	=>map2 := make(map[string]float, 100)
	当 map 增长到容量上限的时候，如果再增加新的 key-value，map 的大小会自动加 1，
	所以出于性能的考虑，对于大的 map 或者会快速扩张的 map，即使只是大概知道容量，也最好先标明。

用切片作为map的值：
	mp1 := make(map[int][]int)
	mp2 := make(map[int]*[]int)

访问键是否存在：
	v,ok := map["key"]
	if ok{
	}
	=>如果键存在ok==true,否则ok==false

遍历：for_range
	for k,v := range map{}
	for _,v := range map{}
	for k := range map{} => 只遍历键

注意：
	遍历输出元素的顺序与填充顺序无关，不能期望 map 在遍历时返回某种期望顺序的结果。
	如果需要特定顺序的遍历结果，正确的做法是先排序 => 对键作排序

使用delete()函数从map中删除键值对：
清空map中的所有元素：
	没有为 map 提供任何清空所有元素的函数、方法，清空 map 的唯一办法就是重新 make 一个新的 map，不用担心垃圾回收的效率，Go语言中的并行垃圾回收效率比写一个清空函数要高效的多。

sync.Map:
	并发环境中使用的map
	map 在并发情况下，只读是线程安全的，同时读写是线程不安全的。

	无须初始化，直接声明即可。
	sync.Map 不能使用 map 的方式进行取值和设置等操作，而是使用 sync.Map 的方法进行调用，Store 表示存储，Load 表示获取，Delete 表示删除。
	使用 Range 配合一个回调函数进行遍历操作，通过回调函数返回内部遍历出来的值，
	Range 参数中回调函数的返回值在需要继续迭代遍历时，返回 true，终止迭代遍历时，返回 false。

	var m sync.Map
	m.Store("key",value)
	m.Load("key")
	m.Delete("key")
	m.Range(func(k,v interface{})bool{
		fmt.Println("iterate:",k,v)
		return true =>返回false只遍历一个***
	})

sync.Map 没有提供获取 map 数量的方法，替代方法是在获取 sync.Map 时遍历自行计算数量，sync.Map 为了保证并发安全有一些性能损失，因此在非并发情况下，使用 map 相比使用 sync.Map 会有更好的性能。









