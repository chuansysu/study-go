方法接收器：
	非本地类型不可定义方法接收者，如int，float
	func (i int)print(){
		fmt.Println(i)
	}
	******************************************************
	cannot define new methods on non-local type int
	******************************************************

	type MyInt int
	func (i MyInt)print(){
		fmt.Println(i)
	}
	func (i *MyInt)print(){		// 111.***********注意与222的区别
	}
	=>正确，MyInt为新定义的本地类型

	type IntPtr *int
	type (p IntPtr)print(){		// 222.***********注意与111的区别
	}
	*****************************************
	=>错误，不允许本身是指针的类型进行方法声明
	*****************************************

不涉及接口：
	指针类型可以调用值接收者方法和指针接收者方法
		=>go自动转换
	值类型可以调用值接收者方法和指针接收者方法
		=>go自动转换，但有条件 ***************搞懂条件****************
		=>该值必须可以取地址，比如变量
		=>临时变量不能取地址，切片不能取地址

	type Z struct{}
	func (z Z)Hello(){
		fmt.Println("Hello")
	}
	func (z *Z)World(){
		fmt.Println("World")
	}
	func main(){
		zv := Z{}
		zv.Hello()
		zv.World()	//正确，值类型可以调用值方法和指针方法

		zp := &Z{}
		zp.Hello()
		zp.World()	//正确，指针类型可以调用值方法和指针方法
	}

涉及接口：
	值类型只能调用值接收者方法**************
	指针类型可以调用值方法和指针方法***************

	type Z struct{}
	func (z Z)Hello(){
		fmt.Println("Hello")
	}
	func (z *Z)World(){
		fmt.Println("World")
	}
	type Coding interface{
		Hello()
		World()
	}
	func main(){
		var c Coding
		//c = Z{} 	// 编译错误，值类型不拥有指针方法World()
				// 即Z{}没有实现Coding的World()方法
		c = &Z{}	// 正确，指针类型拥有值方法和指针方法
		fmt.Println(c)
	}

方法变量和表达式：

	方法变量：
		p := Point{2,4}
		q := Point{4,6}
	
		distanceFromP := p.Distance // 方法变量，****注意p.
		fmt.Println(distanceFromP(q)) =>5

		ScaleP := p.ScaleBy
		scaleP(2)

	方法表达式：
		distance := Point.Distance //方法表达式
		distance(p,q)
	
		scale := (*Point).ScaleBy
		scale(&p,2) =>注意区分调用方式














