IF:
	if cond{
	}

	if cond{
	}else{
	}
	
	if cond{
	}else if cond{
	}else{
	}

	**************************************
	if err := Connect(); err != nil{
	}
	**************************************

FOR：
	go循环只支持for关键字，不支持while和do-while语句。
	
	for i := 0; i < 10; i++{
	}
	
	// 可省略初始化语句
	step := 2
	for ; step>0; step--{
	}

	var i int
	for i<=10{
	}

	// 可省略所有条件语句
	sum := 0
	for{
		sum++
		if sum > 100{
			break	// 跳出循环
		}
	}

	LABLE:
	sum := 0
	for{
		sum++
		if sum == 10{
			continue // 执行下个循环
		}else if sum > 100{
			break LABLE	// 跳出BABEL语块
		}
		// do something
	}

for-range:
	可用于数组，切片，字符串，map,channel
	
	for k,v := range arr{
	}
	
	for k := range str{
	}

	for _,v := range map1{
	}
	******************************************************************
	需要要注意的是，val 始终为集合中对应索引的值拷贝，
	因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值。
	******************************************************************

switch:
	Go语言的 switch 要比C语言的更加通用，表达式不需要为常量，甚至不需要为整数，
	case 按照从上到下的顺序进行求值，直到找到匹配的项，如果 switch 没有表达式，
	则对 true 进行匹配，因此，可以将 if else-if else 改写成一个 switch。

	switch a {
	case 1:
		//do something
	case 2,3:
		//do something
	default:
		//do default
	}

	var r int = 11
	switch {
	case r>10 && r<20:
		//do something
	} 

	跨越case的fallthrough--兼容c语言 ******新编写的代码，不建议使用fallthrough******
	var s = "hello"
	switch{
	case s == "hello":
		//do something
		fallthrough
	case s != "hello":
		//do something
	}

循环结束语句：
	break,goto,return,panic等强制退出循环

goto:
	退出循环，可退出多层循环，非循环也可使用
	goto label:
	..
	.
	label: statement //可放前面或者后面

break:
	OuterLoop:
	for i:=0;i<2;i++{
		for j:=0;j<5;j++{
			switch j{
			case 2:
				break OuterLoop
			case 3:
				//do something
				break OuterLoop
			}
		}
	}

continue:
	OuterLoop:
	for i:=0;i<2;i++{
		for j:=0;j<5;j++{
			switch{
			case 2:
				//do something
				continue OuterLoop
			}
		}
	}








