
数组:
	是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。

对比切片：
	Slice 是可以增长和收缩的动态序列，功能也更灵活

声明：
	var 数组变量名 [元素数量]Type
	例子: var a [3]int

语法说明如下所示：
    数组变量名：数组声明及使用时的变量名。
    元素数量：数组的元素数量，可以是一个表达式，但最终通过编译期计算的结果必须是整型数值，元素数量不能含有到运行时才能确认大小的数值。
    Type：可以是任意基本类型，包括数组本身，类型为数组本身时，可以实现多维数组。

数组的每个元素都可以通过索引下标来访问，索引下标的范围是从 0 开始到数组长度减 1 的位置，内置函数 len() 可以返回数组中元素的个数。
	1)
		for i:=0;i<len(arr);i++{
			fmt.Println(arr[i])
		}
	2)
		for _,v := range arr{
			fmt.Println(i,v)
		}

默认情况下，数组的每个元素都会被初始化为元素类型对应的零值，对于数字类型来说就是 0

初始化数组：
	var q [3]int = [3]int{1,2,3}
	var q *[3]int = new([3]int) => &[0,0,0]
	q := [...]int{1,2,3} => 长度根据初始化值来计算

数组的长度是数组类型的一个组成部分，因此 [3]int 和 [4]int 是两种不同的数组类型
	q := [3]int{1,2,3}
	q = [4]int{1,2,3,4} =>编译错误，无法将[4]int赋给[3]int

比较两个数组是否相等:
如果两个数组类型相同（包括数组的长度，数组中元素的类型）的情况下，我们可以直接通过较运算符（==和 !=）来判断两个数组是否相等，只有当两个数组的所有元素都是相等的时候数组才是相等的，不能比较两个类型不同的数组，否则程序将无法完成编译。

多维数组：
	var arr_name [size1][size2]...[sizen]arr_type

声明二维数组：
	var array [4][2]int
	array = [4][2]int{{10,11},{20,21},{30,31},{40,41}}
	// 声明并初始化数组中索引为 1 和 3 的元素
	array = [4][2]int{1: {20, 21}, 3: {40, 41}}
	// 声明并初始化数组中指定的元素
	array = [4][2]int{1: {0: 20}, 3: {1: 41}}

使用索引为多维数组赋值:
	// 将 array1 的索引为 1 的维度复制到一个同类型的新数组里
	var array3 [2]int = array1[1]
	// 将数组中指定的整型值复制到新的整型变量里
	var value int = array1[1][0]




