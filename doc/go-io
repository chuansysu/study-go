Go语言标准库的 bufio 包中，实现了对数据 I/O 接口的缓冲功能。
这些功能封装于接口 io.ReadWriter、io.Reader 和 io.Writer 中，
并对应创建了 ReadWriter、Reader 或 Writer 对象，在提供缓冲的同时实现了一些文本基本 I/O 操作功能。

ReadWriter对象：
	type ReadWriter struct{
		*Reader
		*Writer
	}

	默认情况下，ReadWriter 对象中存放了一对 Reader 和 Writer 指针，它同时提供了对数据 I/O 对象的读写缓冲功能。

	func NewReadWriter(r *Reader,w *Writer)*ReadWriter
	参数 r 是要读取的来源 Reader 对象，参数 w 是要写入的目的 Writer 对象。

	import(
		"bufio"
		"bytes"
		"fmt"
	)
	func main(){
		data := []byte("C语言中文网")
		rd := bytes.NewReader(data)
		r := bufio.NewReader(rd)
		var buf [128]byte
		n,err := r.Read(buf[:])
		fmt.Println(string(buf[:n]),n,err)
	}

Reader对象：
	type Reader struct{
		//contains filtered or unexported fields
	}

	默认情况下 Reader 对象没有定义初始值，输入缓冲区最小值为 16。当超出限制时，另创建一个二倍的存储空间。

	func NewReader(rd io.Reader)*Reader				// 默认缓冲区长度
	func NewReaderSize(rd io.Reader, size int) *Reader	// 指定缓冲区长度
	参数 rd 是 io.Reader 接口，参数 size 是指定的缓冲区字节长度。
	按照缓冲区默认长度创建 Reader 对象，Reader 对象会从底层 io.Reader 接口读取尽量多的数据进行缓存。
	
	操作Reader对象：
		Read()、ReadByte()、ReadBytes()、ReadLine()、ReadRune ()、
		ReadSlice()、ReadString()、UnreadByte()、UnreadRune()、Buffered()、Peek()

Writer对象：
	type Writer struct {
		//contains filtered or unexported fields
	}

	默认情况下 Writer 对象没有定义初始值，如果输出缓冲过程中发生错误，则数据写入操作立刻被终止，后续的写操作都会返回写入异常错误。

	func NewWriter(wr io.Writer) *Writer				// 默认缓冲区长度，好像是4096
	func NewWriterSize(wr io.Writer, size int) *Writer	// 指定缓冲区长度
	参数 wr 是 io.Writer 接口，Writer 对象会将数据写入该接口。
	按照默认缓冲区长度创建 Writer 对象，Writer 对象会将缓存的数据批量写入底层 io.Writer 接口。

	操作Writer对象：
		Available()、Buffered()、Flush()、Write()、WriteByte()、WriteRune() 和 WriteString() 


















