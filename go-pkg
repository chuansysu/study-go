基本概念：
	包名一般是小写的，使用一个简短且有意义的名称。
	包名一般要和所在的目录同名，也可以不同，包名中不能包含- 等特殊符号。
	包一般使用域名作为目录名称，这样能保证包名的唯一性，
		比如 GitHub 项目的包一般会放到GOPATH/src/github.com/userName/projectName 目录下。
	包名为 main 的包为应用程序的入口包，编译不包含 main 包的源码文件时不会得到可执行文件。
	一个文件夹下的所有源码文件只能属于同一个包，同样属于同一个包的源码文件不能放在多个文件夹下。

	一个目录下的同级文件归属一个包。
	包名可以与其目录不同名。
	包名为 main 的包为应用程序的入口包，编译源码没有 main 包时，将无法编译输出可执行的文件。


导入：
	import "fmt"
	
	import (
		"fmt"
		"runtime"
		"github.com/chuan/pkg"
		"database/sql/driver"
	)

	包在引用时一般使用全路径引用
	标准包的导入只能使用全路径导入。
	包名是从GOPATH/src/或者GOROOT/src后开始计算的，使用/ 进行路径分隔。
	*******************相对路径好像支持不太好*******************

引用格式：
	1.标准格式：
		import "fmt"
	2.自定义别名
		import F "fmt"
		fmt.Println("hello") =>F.Println("hello")
	3.省略引用格式
		import . "fmt"
		Println("hello") =>不用写前缀fmt.
	4.匿名引用格式
		import _ "fmt"
		在引用某个包时，如果只是希望执行包初始化的 init 函数，而不使用包内部的数据时，可以使用匿名引用格式
		=>只是执行包的初始化函数init()

加载：
	包初始化程序从 main 函数引用的包开始，逐级查找包的引用，
		直到找到没有引用其他包的包，最终生成一个包引用的有向无环图。
	Go 编译器会将有向无环图转换为一棵树，然后从树的叶子节点开始逐层向上对包进行初始化。
	单个包的初始化过程如上图所示，先初始化常量，然后是全局变量，最后执行包的 init 函数。

fmt:
	%v：默认格式的值。当打印结构时，加号（%+v）会增加字段名；
	%#v：Go样式的值表达； ***********=>%+#v***********
	%T：带有类型的 Go 样式的值表达。

Go语言的闪电般的编译速度主要得益于三个语言特性。
	第一点，所有导入的包必须在每个文件的开头显式声明，这样的话编译器就没有必要读取和分析整个源文件来判断包的依赖关系。
	第二点，禁止包的环状依赖，因为没有循环依赖，包的依赖关系形成一个有向无环图，每个包可以被独立编译，而且很可能是被并发编译。
	第三点，编译后包的目标文件不仅仅记录包本身的导出信息，目标文件同时还记录了包的依赖关系。
		因此，在编译一个包的时候，编译器只需要读取每个直接导入包的目标文件，而不需要遍历所有依赖的的文件。














