列表是一种非连续的存储容器，由多个节点组成，节点通过一些变量记录彼此之间的关系，列表有多种实现方法，如单链表、双链表等。

列表与切片和 map 不同的是，列表并没有具体元素类型的限制，因此，列表的元素可以是任意类型，这既带来了便利，也引来一些问题，
***** 
例如给列表中放入了一个 interface{} 类型的值，取出值后，如果要将 interface{} 转换为其他类型将会发生宕机。 *****
*****

container/list:
	内部的实现原理是双链表，列表能够高效地进行任意位置的元素插入和删除操作。

List:
	type List struct{
		root Element
		len int	//List的长度(除去哨兵节点)
	}
	List的第一个节点为哨兵节点，不存储任何信息。
	List的头从哨兵节点的下一个节点开始。

Element:
	type Element struct{
		list *List
		value interface{}
		next,prev *Element
	}

******************************************************************************************
为了简化实现，List的内部实现为一个环，这样l.
root既是最后一个list元素(l.Back())的下一个元素，也是第一个list元素(l.Front())的上一个元素。
******************************************************************************************

初始化列表：
	两种方法：分别是使用 New() 函数和 var 关键字声明，两种方法的初始化效果都是一致的。

	1.通过New()初始化list:
		变量名 := list.New() => l := list.New()
	2.通过var关键字
		var 变量名 list.List => var l list.List

在列表中插入元素：
	 双链表支持从队列前方或后方插入元素，分别对应的方法是 PushFront 和 PushBack。 
	l := list.New()
	l.PushBack("first")
	l.PushFront(67)

	提示：
		这两个方法都会返回一个 *list.Element 结构，如果在以后的使用中需要删除插入的元素，
		则只能通过 *list.Element 配合 Remove() 方法进行删除，这种方法可以让删除更加效率化，同时也是双链表特性之一。

从列表中删除元素：
	列表插入函数的返回值会提供一个 *list.Element 结构，这个结构记录着列表元素的值以及与其他节点之间的关系等信息，
	从列表中删除元素时，需要用到这个结构进行快速删除。
	
	func (l *List) Remove(e *Element) interface{} =>只有一个接口，输入参数为*Element

遍历：
	l := list.New()
	for i:=l.Front();i!=nil;i=i.Next(){
		fmt.Println(i.value)
	}

模拟栈：
	stack := list.New()
	stack.PushBack(1)
	stack.PushBack(2)
	stack.PushBack(3)
	stack.PushBack(4)
	for stack.Len()>0{
		fmt.Println(stack.Remove(stack.Back()))
	}
	
模拟队列：
	queue := list.New()
	queue.PushBack(1)
	queue.PushBack(2)
	queue.PushBack(3)
	queue.PushBack(4)
	for queue.Len()>0{
		fmt.Println(queue.Remove(queue.Front()))
	}


