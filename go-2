基本语法
Go语言是静态型语言，变量是有明确类型的，编译器也会检查变量类型的正确性。

基本类型：
bool
string
int,int8,int16,int32,ing64
uint,uint8,uint16,uint32,uint64
byte // uint8的别名
rune // int32的别名，代表一个Unicode码
float32,float64
complex64,complex128

所有内存在go中都是经过初始化的。int为0，float为0.0,bool为false,string为空字符串，指针为nil。

变量命名规则：骆驼命名法，numShips,startDate


变量的声明：

1) 标准格式
	var name type

类型放在变量名后面好处：
	int* a,b;//c语言,声明方式含糊不清,其中a是指针而b不是
	var a,b *int // go语言，a,b都是指针

2) 批量格式
	var(
		a int
		b string
		c []float32
		d func()bool
		e struct{
			x int
		}
	)

3)简单格式
	名字 := 表达式
	限制：
		定义变量，同时显示初始化
		不能提供数据类型
		只能用在函数内部(注意)
	可同时声明多个:
		i,j := 0,1
	必须至少有一个前面没有定义过
		var a int
		a,b := 0,1
	合法的，b在前面没有定义过

变量初始化的标准格式： var 变量名 类型 = 表达式
编译器推导类型的格式： var hp = 100
短变量声明并初始化: hp := 100

        a,b := 0,1 => 支持多个变量同时赋值
        a,b = b,a => 支持同时交换

匿名变量：不占内存空间，不会分配内存
	a,_ := GetData()

变量的作用域:
	函数内定义的变量 => 局部变量
	函数外定义的变量 => 全局变量 => 所有源文件可使用
	函数定义中的变量 => 形式参数

变量的生命周期：
	在程序的编译阶段，编译器会根据实际情况自动选择在栈或者堆上分配局部变量的存储空间，
	不论使用 var 还是 new 关键字声明变量都不会影响编译器的选择。 
	
	变量逃逸分析 => 编译器自动决定 *需要深入了解此块内容

	在实际的开发中，并不需要刻意的实现变量的逃逸行为，
	因为逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。

	虽然Go语言能够帮助我们完成对内存的分配和释放，但是为了能够开发出高性能的应用我们任然需要了解变量的生命周期。
	例如，如果将局部变量赋值给全局变量，将会阻止 GC 对这个局部变量的回收，导致不必要的内存占用，从而影响程序的性能。

类型别名：
	type TypeAlias = Type **********注意区分类型定义
	TypeAlias 只是 Type 的别名，本质上 TypeAlias 与 Type 是同一个类型 ***********类型定义是新的静态类型

	非本地类型不能定义方法*********注意理解
	不能为不在一个包中的类型定义方法******

注释：
	单行：//
	多行：/* */

	每一个包都应该有相关注释，在使用 package 语句声明包名之前添加相应的注释，用来对包的功能及作用进行简要说明。
	使用go doc 包名 => 可以打印包注释
	go doc的使用**************

关键字：25个
	词法：标示符，关键字，操作符，分割符，字面量

标示符：
	标识符的命名需要遵守以下规则：
	由 26 个英文字母、0~9、_组成；
	不能以数字开头，例如 var 1num int 是错误的；
	Go语言中严格区分大小写；
	标识符不能包含空格；
	不能以系统保留关键字作为标识符，比如 break，if 等等。

	命名标识符时还需要注意以下几点：
    		标识符的命名要尽量采取简短且有意义；
    		不能和标准库中的包名重复；
    	为变量、函数、常量命名时采用驼峰命名法，例如 stuName、getVal；

	当然Go语言中的变量、函数、常量名称的首字母也可以大写，
	如果首字母大写，则表示它可以被其它的包访问（类似于 Java 中的 public）；
	如果首字母小写，则表示它只能在本包中使用 (类似于 Java 中 private）。

