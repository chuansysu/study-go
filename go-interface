接口本身是调用方和实现方均需要遵守的一种协议，大家按照统一的方法命名参数类型和数量来协调逻辑处理的过程。

Go 语言中使用组合实现对象特性的描述。对象的内部使用结构体内嵌组合对象应该具有的特性，对外通过接口暴露能使用的特性。

Go 语言的接口设计是非侵入式的，接口编写者无须知道接口被哪些类型实现。而接口实现者只需知道实现的是什么样子的接口，但无须指明实现哪一个接口。编译器知道最终编译时使用哪个类型实现哪个接口，或者接口应该由谁来实现。 

Go语言不是一种 “传统” 的面向对象编程语言：它里面没有类和继承的概念。

接口是双方约定的一种合作协议。接口实现者不需要关心接口会被怎样使用，调用者也不需要关心接口的实现细节。接口是一种类型，也是一种抽象结构，不会暴露所含数据的格式、类型及结构。 

Go语言的每个接口中的方法数量不会很多。Go语言希望通过一个接口精准描述它自己的功能，而通过多个接口的嵌入和组合的方式将简单的接口扩展为复杂的接口。

接口声明格式：
	type Writer interface{
		Write([]byte)(n int, err error)
	}
	type Stringer interface{
		String() string
	}
接口可以嵌套组合：
	type Writer interface{
		Write(p []type)(n int,err error)
	}
	type Closer interface{
		Close()error
	}
	type WriteCloser interface{
		Writer
		Closer
	}

实现接口的条件：
	如果一个任意类型 T 的方法集为一个接口类型的方法集的超集，则我们说类型 T 实现了此接口类型。
	T 可以是一个非接口类型，也可以是一个接口类型。
	实现关系在Go语言中是隐式的。两个类型之间的实现关系不需要在代码中显式地表示出来。

	*******************************************
	条件一：
		接口的方法与实现接口的类型方法格式一致
	条件二：
		接口中所有方法均被实现

	===>可多不可少
	*******************************************

	常见错误:
		1.函数名不一致
		2.方法签名不一致

		import "fmt"
		type DataWriter interface{
			WriteData(data interface{})error
		}
		type file struct{
		}
		func (d *file)WriteData(data interface{})error{
			fmt.Println("Writedata:",data)
			return nil
		}
		func main(){
			f := new(file)
			var writer DataWriter
			writer = f
			writer.WriteData("data")
		}
		=> WriteData:data

提示：
传统的派生式接口及类关系构建的模式，让类型间拥有强耦合的父子关系。这种关系一般会以“类派生图”的方式进行。经常可以看到大型软件极为复杂的派生树。随着系统的功能不断增加，这棵“派生树”会变得越来越复杂。

类型与接口的关系：
	有一对多和多对一的关系
	
	**************************
	一个类型可以实现多个接口：
	多个类型可以实现相同的接口：
	**************************
	
	type Service interface{
		Start()
		Log(string)
	}
	type Logger struct{
	}
	func (g *Logger)Log(l string){
	}
	type GameService struct{
		Logger		//结构体嵌套
	}
	func (g *GameService)Start(){
	}
	var s Service = new(GameService)
	s.Start()
	s.Log("Hello")

接口断言：
	==>对比值类型断言
	类型断言（Type Assertion）是一个使用在接口值上的操作，
	用于检查接口类型变量所持有的值是否实现了期望的接口或者具体的类型。

	v,ok := x.(T)	=> 结合switch...case...
	x 表示一个接口的类型，T 表示一个具体的类型（也可为接口类型）。
	
	如果 T 是具体某个类型，类型断言会检查 x 的动态类型是否等于具体类型 T。
		如果检查成功，类型断言返回的结果是 x 的动态值，其类型是 T。
	如果 T 是接口类型，类型断言会检查 x 的动态类型是否满足 T。
		如果检查成功，x 的动态值不会被提取，返回值是一个类型为 T 的接口值。

	*****************************************************************************************************
    	无论 T 是什么类型，如果 x 是 nil 接口值，类型断言都会失败。
	如果不接收第二个参数也就是上面代码中的 ok，断言失败时会直接造成一个 panic。如果 x 为 nil 同样也会 panic。
	*****************************************************************************************************

	package main
	import "fmt"
	func main(){
		var x interface{}	//静态类型interface{}
		x = 10 		//动态类型int
		value,ok := x.(int)
		fmt.Print(value,",",ok)
	}
	=>10,true

	有两种可能。
	************第一种，如果断言的类型 T 是一个具体类型(如下: *os.File)

	var w io.Writer
	w = os.Stdout 		// *os.File (struct)实现接口Write([]byte)(n int,err error)
	f := w.(*os.File) 	// 成功: f == os.Stdout
	c := w.(*bytes.Buff) 	// 死机：接口保存*os.file，而不是*bytes.buffer

	************第二种，如果相反断言的类型 T 是一个接口类型，然后类型断言检查是否 i 的动态类型满足 T。
	换句话说，对一个接口类型的类型断言改变了类型的表述方式，改变了可以获取的方法集合（通常更大），
	但是它保护了接口值内部的动态类型和值的部分。

	var w io.Writer
	w = os.Stdout
	rw := w.(io.ReadWriter)	// 成功：*os.file具有读写功能
	w = new(ByteCounter)
	rw = w.(io.ReadWriter)	//  死机：*字节计数器没有读取方法

将接口转换为其他接口：
	实现某个接口的类型同时实现了另外一个接口，此时可以在两个接口间转换。

	var obj interface{} = new(bird)
	f,isFlyer := obj.(Flyer)

	new(bird) 产生 *bird 类型的 bird 实例，这个实例被保存在 interface{} 类型的 obj 变量中。
	使用 obj.(Flyer) 类型断言，将 obj 转换为 Flyer 接口。
	f 为转换成功时的 Flyer 接口类型，isFlyer 表示是否转换成功，类型就是 bool。

	package main
	import "fmt"
	type Flyer interface{
		Fly()
	}
	type Walker interface{
		Walk()
	}
	type bird struct{
	}
	func (b *bird)Fly(){
		fmt.Println("bird:fly")
	}
	func (b *bird)Walk(){
		fmt.Println("bird:walk")
	}
	type pig struct{
	}
	func (p *pig)Walk(){
		fmt.Println("pig:walk")
	}
	func main(){
		animals := map[string]interface{}{
			"bird":new(bird),
			"pig":new(pig),
		}
		for name,obj := range animals{
			f,isFlyer := obj.(Flyer)
			w,isWalker := obj.(Walker)
			fmt.Printf("name: %s isFlyer: %v isWalker: %v\n", name, isFlyer, isWalker)
			if isFlyer{
				f.Fly()
			}
			if isWalker{
				w.Walk()
			}
		}
	}

将接口转换为其他类型：
	p1 := new(pig)
	var a Walker = p1
	p2 := a.(*pig)
	fmt.Printf("p1=%p p2=%p", p1, p2)	=>p1==p2

	第 2 行，由于 pig 实现了 Walker 接口，因此可以被隐式转换为 Walker 接口类型保存于 a 中。
	第 3 行，由于 a 中保存的本来就是 *pig 本体，因此可以转换为 *pig 类型。
	第 4 行，对比发现，p1 和 p2 指针是相同的。

	p1 := new(pig)
	var a Walker = p1
	p2 := a.(*bird)
	=>panic: interface conversion: main.Walker is *main.pig, not *main.bird
	因此，接口在转换为其他类型时，接口内保存的实例对应的类型指针，必须是要转换的对应的类型指针。 

总结：
接口和其他类型的转换可以在Go语言中自由进行，前提是已经完全实现。
接口断言类似于流程控制中的 if。但大量类型断言出现时，应使用更为高效的类型分支 switch 特性。

空接口：interface{}
	空接口是接口类型的特殊形式，空接口没有任何方法，因此任何类型都无须实现空接口。
	从实现的角度看，任何值都满足这个接口的需求。因此空接口类型可以保存任何值，也可以从空接口中取出原值。 

	空接口的内部实现保存了对象的类型和指针。使用空接口保存一个数据的过程会比直接用数据对应类型的变量保存稍慢。
	因此在开发中，应在需要的地方使用空接口，而不是在所有地方使用空接口。 

	1.将值保存与空接口：任何值都可以保存与空接口中
	2.从空接口获取值：******使用断言******
	3.空接口的值比较：
		1) 类型不同的空接口间的比较结果不相同
			var a interface{} = 100
			var b interface{} = "hello"
			fmt.Println(a == b) // false

		2) 不能比较空接口中的动态值
			var c interface{}=[]int{10}
			var d interface{}=[]int{20}
			fmt.Println(c == d) 
			// panic: runtime error: comparing uncomparable type []int

		*****************************************************************************
		map:panic,不可比较
		slice:panic,不可比较
		chan:可比较，必须由同一个 make 生成，也就是同一个通道才会是 true，否则为 false
		array:可比较，编译期知道两个数组是否一致
		struct:可比较，可以逐个比较结构体的值
		func:可比较
		*****************************************************************************







